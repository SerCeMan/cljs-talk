<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1449431393619">{:repl-history {:ide [], :local [&quot;(defn run [&amp; args]\n  (run-server #'chartrootm {:port 9899}))&quot; &quot;(run-server #'chartrootm {:port 9899})&quot; &quot;(defroutes chartrootm\n           (GET \&quot;/ws\&quot; [] chat-handler)\n           (not-found \&quot;&lt;p&gt;Page not found.&lt;/p&gt;\&quot;))&quot; &quot;(select-keys {:a 1 :b 2} [:a])&quot; &quot;(select-keys my-id (:users @app-state))&quot; &quot;my-id&quot; &quot;(into {} (vals @clients))&quot; &quot;(vals @clients)&quot; &quot;@clients&quot; &quot;(stop)&quot; &quot;(def stop\n    (run-server #'chartrootm {:port 9899}))&quot; &quot;(+ 1 1)&quot; &quot;#{:bar 3.14 \&quot;hello\&quot;}&quot; &quot;\&quot;foo\&quot;&quot; &quot;(.class 1)&quot; &quot;(.getClass() 1)&quot; &quot;(.getClass 1.2L)&quot; &quot;(.getClass 1.2)&quot; &quot;(.getClass 1)&quot; &quot;(.getClass 100000000000000000000000000000)&quot; &quot;#'foo&quot; &quot;(def foo 2)&quot; &quot;(def foo identity)&quot; &quot;(def foo id)&quot; &quot;(identity 2)&quot; &quot;(id 1)&quot; &quot;(identity 1)&quot; &quot;(def foo (fn [&amp; arg] 1))&quot; &quot;(foo :bar 3.14)&quot; &quot;(clojure.repl/source foo)&quot; &quot;(.getClass() foo)&quot; &quot;(.getClass foo)&quot; &quot;foo&quot; &quot;(if (= 1 2) \n    \&quot;y\&quot; \n    \&quot;n\&quot;)&quot; &quot;(if (= 1 1) \n    \&quot;y\&quot; \n    \&quot;n\&quot;)&quot; &quot;(+ k (* 2 4))&quot; &quot;1.23&quot; &quot;[:bar 3.14 \&quot;hello\&quot;]&quot; &quot;(+ 1 2 3)&quot; &quot;'(+ 1 2 3)&quot; &quot;+&quot; &quot;(str \&quot;Hello \&quot; \&quot;World\&quot;)&quot; &quot;(def b 4)&quot; &quot;(def c 5)&quot; &quot;(def e a)&quot; &quot;(def a 4)&quot; &quot;e&quot; &quot;a&quot; &quot;(def a 3)&quot; &quot;(= a b)&quot; &quot;(+ a b)&quot; &quot;(- a b)&quot; &quot;(* a b c)&quot; &quot;(&lt; a b c)&quot; &quot;(fn [username]                                            ; &lt;-- expected parameters vector\n    (str \&quot;Hello \&quot; username))&quot; &quot;(def greet (partial str \&quot;Hello \&quot;))&quot; &quot;(greet \&quot;Bob\&quot;)&quot;], :remote [&quot;(defonce app-state (atom {:messages [{:text   \&quot;Hello, Bob\&quot;\n                                      :author \&quot;Marty\&quot;}\n                                     {:text   \&quot;Hello, dude\&quot;\n                                      :author \&quot;Anon\&quot;}]\n                          :clients  [{:name \&quot;Marty\&quot;}\n                                     {:name \&quot;Anon\&quot;}]\n                          :input    \&quot;\&quot;}))&quot; &quot;(1)&quot; &quot;(use 'figwheel-sidecar.repl-api)&quot; &quot;(cljs-repl)&quot; &quot;(seq 10)&quot; &quot;(range 10)&quot; &quot;(range 2\n       )&quot; &quot;(for [i (range 5)]\n  \&quot;1\&quot;\n  )&quot; &quot;(swap! app-state (fn []\n                   {:messages [{:text   \&quot;Hello, Bob\&quot;\n                                :author 1}\n                               {:text   \&quot;Hello, dude\&quot;\n                                :author 2}]\n                    :users    {0 {:name \&quot;YOU\&quot;}\n                               1 {:name \&quot;Marty\&quot;}\n                               2 {:name \&quot;Anon\&quot;}}\n                    :input    \&quot;\&quot;}))&quot; &quot;(get-in @app-state [:users 0])&quot; &quot;(prn \&quot;HELLO\&quot;)&quot; &quot;(def name-path [:users 0 :name])&quot; &quot;(get-in @app-state name-path)&quot; &quot;(swap! app-state assoc :input \&quot;Hello\&quot;)&quot; &quot;(swap! app-state assoc :input \&quot;Hello!!!\&quot;)&quot; &quot;:a&quot; &quot;[]&quot; &quot;{}&quot; &quot;()&quot; &quot;'()&quot; &quot;:d&quot; &quot;{:a 1}&quot; &quot;({:a 1} :a)&quot; &quot;:fdsfljfs&quot; &quot;:Fds&quot; &quot;\&quot;Fsdf\&quot;&quot; &quot;(:a {:a 1})&quot; &quot;(:a \&quot;ffds\&quot;)&quot; &quot;(. fdsf fds fsdf fds)&quot; &quot;{:a {:b {:c {:d 1}}}}&quot; &quot;(get-in  {:a {:b {:c {:d 1}}}} [:a :b :c :d])&quot; &quot;(let [{{{x :c} :b} :a} {:a {:b {:c {:d 1}}}}]\n  x\n  )&quot; &quot;(let [{{{{:keys [d k e]} :c} :b} :a} {:a {:b {:c {:d 1 :k 2 :e 3}}}}]\n  [d k e])&quot; &quot;(use 'figwheel-sidecar.repl-api) &quot; &quot;(use 'figwheel-sidecar.repl-api) (cljs-repl)&quot; &quot;my-id&quot; &quot;(select-keys my-id (:users @app-state))&quot; &quot;(:users @app-state)&quot; &quot;(count (:users @app-state))&quot; &quot;socket&quot; &quot;(.send socket (str {:type :msg\n                    :body {:text   \&quot;ss\&quot;\n                           :author my-id}}))&quot; &quot;#&quot; &quot;@app-state&quot; &quot;@clients&quot;]}}</component>
</project>